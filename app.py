"""
–ù–æ–≤—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π WB –ø–∞—Ä—Å–µ—Ä - —Ç–æ–ª—å–∫–æ HTML —Ç–µ–∫—Å—Ç
–ó–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—ã–π basket API –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π HTML –ø–∞—Ä—Å–∏–Ω–≥
"""

from flask import Flask, request, jsonify
import requests
from bs4 import BeautifulSoup
import time
import re
from urllib.parse import unquote

app = Flask(__name__)

# –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ headers –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
BROWSER_HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
    'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    'Accept-Encoding': 'gzip, deflate, br',
    'DNT': '1',
    'Connection': 'keep-alive',
    'Upgrade-Insecure-Requests': '1',
    'Sec-Fetch-Dest': 'document',
    'Sec-Fetch-Mode': 'navigate',
    'Sec-Fetch-Site': 'none',
    'Cache-Control': 'max-age=0'
}

def clean_text(text):
    """–û—á–∏—Å—Ç–∫–∞ HTML —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    if not text:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = ' '.join(text.split())
    
    # –£–±–∏—Ä–∞–µ–º JS –∫–æ–¥ –∏ CSS
    text = re.sub(r'<script[^>]*>.*?</script>', '', text, flags=re.DOTALL | re.IGNORECASE)
    text = re.sub(r'<style[^>]*>.*?</style>', '', text, flags=re.DOTALL | re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º HTML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    text = re.sub(r'<!--.*?-->', '', text, flags=re.DOTALL)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä (–ø–µ—Ä–≤—ã–µ 50000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ —Ö–≤–∞—Ç–∏—Ç—å)
    if len(text) > 50000:
        text = text[:50000] + "... [–æ–±—Ä–µ–∑–∞–Ω–æ]"
    
    return text

def extract_product_html(product_id):
    """
    –ü—Ä–æ—Å—Ç–æ–π HTML –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ WB
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        url = f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx"
        print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º HTML: {url}")
        
        # –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å
        response = requests.get(url, headers=BROWSER_HEADERS, timeout=15)
        
        if response.status_code != 200:
            return {
                "success": False,
                "error": f"HTTP {response.status_code}",
                "product_id": product_id
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ HTML
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
        page_text = soup.get_text(separator=' ', strip=True)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        clean_page_text = clean_text(page_text)
        
        if len(clean_page_text) < 100:
            return {
                "success": False,
                "error": "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞",
                "product_id": product_id
            }
        
        print(f"‚úÖ HTML —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω: {len(clean_page_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return {
            "success": True,
            "product_id": product_id,
            "html_text": clean_page_text,
            "url": url,
            "text_length": len(clean_page_text)
        }
        
    except requests.exceptions.Timeout:
        return {
            "success": False,
            "error": "–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
            "product_id": product_id
        }
    except Exception as e:
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}",
            "product_id": product_id
        }

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        "status": "OK",
        "message": "WB HTML Parser Service",
        "version": "2.0 - HTML Text Only",
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
    })

@app.route('/parse/<product_id>', methods=['GET'])
def parse_single_product(product_id):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML —Ç–µ–∫—Å—Ç
    GET /parse/12345678
    """
    if not product_id or not product_id.isdigit():
        return jsonify({
            "success": False,
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞"
        }), 400
    
    print(f"üì¶ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞: {product_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º HTML —Ç–µ–∫—Å—Ç
    result = extract_product_html(product_id)
    
    return jsonify(result)

@app.route('/parse', methods=['POST'])
def parse_multiple_products():
    """
    –ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
    POST /parse
    {"product_ids": ["12345678", "87654321"]}
    """
    try:
        data = request.get_json()
        
        if not data or 'product_ids' not in data:
            return jsonify({
                "success": False,
                "error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ product_ids"
            }), 400
        
        product_ids = data['product_ids']
        
        if not isinstance(product_ids, list) or len(product_ids) == 0:
            return jsonify({
                "success": False,
                "error": "product_ids –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º"
            }), 400
        
        if len(product_ids) > 10:
            return jsonify({
                "success": False,
                "error": "–ú–∞–∫—Å–∏–º—É–º 10 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å"
            }), 400
        
        print(f"üì¶ –ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥: {len(product_ids)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        results = []
        for i, product_id in enumerate(product_ids):
            print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{len(product_ids)}: {product_id}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è ID
            if not str(product_id).isdigit():
                results.append({
                    "product_id": product_id,
                    "success": False,
                    "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID"
                })
                continue
            
            # –ü–∞—Ä—Å–∏–Ω–≥ HTML
            result = extract_product_html(str(product_id))
            results.append(result)
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(product_ids) - 1:
                time.sleep(2)
        
        successful = sum(1 for r in results if r.get('success'))
        failed = len(results) - successful
        
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
        
        return jsonify({
            "success": True,
            "total": len(results),
            "successful": successful,
            "failed": failed,
            "results": results
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return jsonify({
            "success": False,
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"
        }), 500

@app.route('/test', methods=['GET'])
def test_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ"""
    test_product_id = "18671335"  # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    
    print(f"üß™ –¢–ï–°–¢ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {test_product_id}")
    
    result = extract_product_html(test_product_id)
    
    if result.get('success'):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–µ—Å—Ç–∞
        text = result.get('html_text', '')
        
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        has_price = '—Ä—É–±' in text.lower() or '‚ÇΩ' in text
        has_brand = '–±—Ä–µ–Ω–¥' in text.lower() or '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å' in text.lower()
        has_description = len(text) > 1000
        
        result['analysis'] = {
            "has_price_indicators": has_price,
            "has_brand_indicators": has_brand, 
            "has_sufficient_content": has_description,
            "text_preview": text[:300] + "..." if len(text) > 300 else text
        }
    
    return jsonify(result)

@app.route('/', methods=['GET'])
def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        "service": "WB HTML Parser",
        "version": "2.0",
        "description": "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ Wildberries —á–µ—Ä–µ–∑ HTML",
        "endpoints": {
            "/health": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
            "/parse/<product_id>": "–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
            "/parse": "POST –º–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (product_ids array)",
            "/test": "–¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ —Ç–æ–≤–∞—Ä–∞"
        },
        "advantages": [
            "‚ö° –ë—ã—Å—Ç—Ä–æ - 1 –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ 45",
            "üéØ –ù–∞–¥–µ–∂–Ω–æ - HTML –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω", 
            "üîß –ü—Ä–æ—Å—Ç–æ - –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤",
            "üìÑ –ü–æ–ª–Ω–æ - –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
        ]
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ WB HTML Parser Service v2.0")
    print("üìã –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: HTML —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ JSON –ø–æ–ª–µ–π")
    app.run(host='0.0.0.0', port=10000, debug=True)
